* Code Retreat

** Intro

Code Retreats are intentional programming sessions intended to help us hone our skills by focusing intently on a problem for a constrained period of time.

From the [[http://coderetreat.org/][Code Retreat community website:]]

#+BEGIN_QUOTE
Coderetreat is a day-long, intensive practice event, focusing on the fundamentals of software development and design. By providing developers the opportunity to take part in focused practice away from the pressures of 'getting things done', the coderetreat format has proven itself to be a highly effective means of skill improvement.
#+END_QUOTE

Repetition is a common theme in code retreats -- we attempt to solve the same problem multiple times in close succession with the aim of trying out different approaches and seeing how they play out. Frequently the exercises will impose artificial restrictions on our tools or programming techniques in order to prompt new ways of thinking about the problem.

The experience may feel a little hokey at first, but many developers -- experienced and novice alike -- have gone through the process and found it eye-opening and instructive. The most important first step is to buy in -- code retreat only works if you're truly committed to the routine.

** The Game of Life

We'll partner up in cross-cohort pairs for a few sessions of implementing [[https://en.wikipedia.org/wiki/Conway%2527s_Game_of_Life][Conway's Game of Life]].

If you've never heard of the Game of Life, it's a simple "simulation" that imitates the behavior of living systems via a few simple rules.

The Game of Life makes a great programming exercise because it demonstrates some interesting emergent behavior while still being straightforward to implement. Additionally, the problem lends itself to a variety of different solutions and approaches -- you can still learn a lot from it even after implementing it many times.

Here's a neat example of what a (very sophisticated) representation can look like:

[[https://upload.wikimedia.org/wikipedia/commons/d/d0/Color_coded_racetrack_large_channel.gif]]

But don't worry -- you can also make a great Game of Life implementation by combining a few arrays and some =print= statements. In fact that's probably what most of our implementations will look like -- during a code retreat we tend to focus on time-constrained repetition and experimentation rather than building the fanciest implementation.

** Problem Statement

The Game of Life is based around a 2-dimensional grid of "cells". Cells are considered to be either "alive" or "dead."

The grid can be made any size you like, and the initial population of cells can be entered manually or randomly generated.

Once the starting position is defined, the "game" runs by calculating successive generations of the grid or game world. In each generation, the /next state/ of each cell is determined according to four rules:

1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by over-population.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

And that's pretty much it! The instructions are intentionally vague from a technical sense because there are lots of ways to approach the problem. To see some more visual examples, check out the [[https://en.wikipedia.org/wiki/Conway%2527s_Game_of_Life][GoL Wikipedia Page]] which includes animations of some example cell patterns.

** Sessions

Now let's get to it! We'll conduct our code retreat in 3 sessions. For each session, you'll get a new random pair and be expected to approach the problem from scratch.

*** 1 - Straightforward Implementation  -- 30 Minutes
Let's start off with a straightforward attempt at the problem using whatever techniques you and your pair find most natural. Treat this iteration as a "sprint" -- it's unlikely that you'll finish during this time frame, but try to get as much done as you can.

When you finish, *delete all of your code* and get ready to start again!

*** 2 - Silent Ping Pong -- 45 Minutes

For this session, let's mix it up a bit. Spend 45 minutes working with your pair on a new implementation. However you're not allowed to speak!

Instead, we'll use tests and code to communicate ideas back and forth.

As a pair, take alternate between writing tests and writing implementation. One partner starts and (without speaking) writes the first test. Then the other partner takes over and writes the /minimum possible/ implementation to satisfy that test.

After one round, swap places -- now partner #2 will write a test for partner #1 to implement.

This exercise forces us to focus on using tests to drive development in the smallest possible steps. If you try to take too big a step, there's likely to be a miscommunication with your partner. Also, try not to cheat by just writing out text in a comment.

*** 3 - Pen and Paper -- 45 Minutes

For our last session, we'll remove your other constraints. But this time, you have to spend the first 10 minutes *only using pen and paper* (a white board is also acceptable). You can diagram, make plans or notes, and even write code. But your computers must be closed. After 10 minutes, we'll get our computers out and attempt to implement our ideas.
